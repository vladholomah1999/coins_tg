import { Telegraf } from 'telegraf'
import prisma from './db'

if (!process.env.TELEGRAM_BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN must be provided!')
}

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN)

const WEBAPP_URL = process.env.NEXT_PUBLIC_WEBAPP_URL || 'http://localhost:3000'

// –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
bot.use(async (ctx, next) => {
  console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', JSON.stringify(ctx.update, null, 2))
  await next()
})

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
bot.command('ping', async (ctx) => {
  await ctx.reply('pong')
})

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start')
    const { id, first_name, username } = ctx.from || {}
    if (!id) {
      console.log('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')
      return
    }

    console.log('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', { id, first_name, username })

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await prisma.user.upsert({
      where: { telegramId: id.toString() },
      update: {},
      create: {
        telegramId: id.toString(),
        username: username || '',
        balance: BigInt(0)
      }
    })

    console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ:', user)

    await ctx.reply(
      `–í—ñ—Ç–∞—é, ${first_name}! üëã\n–ü–æ—á–Ω—ñ—Ç—å –º–∞–π–Ω–∏—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑:`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –º–∞–π–Ω—ñ–Ω–≥', web_app: { url: WEBAPP_URL } }]
          ]
        }
      }
    )
  } catch (error) {
    console.error('Start command error:', error)
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  try {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /help')
    await ctx.reply(
      'üí° –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n' +
      '/start - –ü–æ—á–∞—Ç–∏ –º–∞–π–Ω—ñ–Ω–≥\n' +
      '/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n' +
      '/referral - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    )
  } catch (error) {
    console.error('Help command error:', error)
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
  }
})

// –ö–æ–º–∞–Ω–¥–∞ /balance
bot.command('balance', async (ctx) => {
  try {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /balance')
    const telegramId = ctx.from?.id.toString()
    if (!telegramId) {
      console.log('ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')
      return
    }

    const user = await prisma.user.findUnique({
      where: { telegramId }
    })

    console.log('–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', user)

    if (!user) {
      return await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start')
    }

    await ctx.reply(
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n${user.balance.toString()} NOT`
    )
  } catch (error) {
    console.error('Balance command error:', error)
    await ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
  }
})

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('text', async (ctx) => {
  try {
    console.log('–û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', ctx.message.text)
    const text = ctx.message.text.toLowerCase()

    if (text === '–±–∞–ª–∞–Ω—Å') {
      await ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /balance –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å—É')
      return
    }

    if (text === '–¥–æ–ø–æ–º–æ–≥–∞') {
      await ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥')
      return
    }

    await ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥')
  } catch (error) {
    console.error('Text handler error:', error)
  }
})

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
bot.catch((err, ctx) => {
  console.error(`–ü–æ–º–∏–ª–∫–∞ –¥–ª—è ${ctx.updateType}:`, err)
})

export default bot